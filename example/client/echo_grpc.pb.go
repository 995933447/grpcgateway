// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.2
// source: echo.proto

package echo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Echo_BasicEcho_FullMethodName     = "/echo.Echo/BasicEcho"
	Echo_NoAuthEcho_FullMethodName    = "/echo.Echo/NoAuthEcho"
	Echo_NoAuthEchoErr_FullMethodName = "/echo.Echo/NoAuthEchoErr"
	Echo_InnerEcho_FullMethodName     = "/echo.Echo/InnerEcho"
)

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoClient interface {
	BasicEcho(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error)
	NoAuthEcho(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error)
	NoAuthEchoErr(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error)
	InnerEcho(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error)
}

type echoClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoClient(cc grpc.ClientConnInterface) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) BasicEcho(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResp)
	err := c.cc.Invoke(ctx, Echo_BasicEcho_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) NoAuthEcho(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResp)
	err := c.cc.Invoke(ctx, Echo_NoAuthEcho_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) NoAuthEchoErr(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResp)
	err := c.cc.Invoke(ctx, Echo_NoAuthEchoErr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) InnerEcho(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResp)
	err := c.cc.Invoke(ctx, Echo_InnerEcho_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
// All implementations must embed UnimplementedEchoServer
// for forward compatibility.
type EchoServer interface {
	BasicEcho(context.Context, *EchoReq) (*EchoResp, error)
	NoAuthEcho(context.Context, *EchoReq) (*EchoResp, error)
	NoAuthEchoErr(context.Context, *EchoReq) (*EchoResp, error)
	InnerEcho(context.Context, *EchoReq) (*EchoResp, error)
	mustEmbedUnimplementedEchoServer()
}

// UnimplementedEchoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEchoServer struct{}

func (UnimplementedEchoServer) BasicEcho(context.Context, *EchoReq) (*EchoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasicEcho not implemented")
}
func (UnimplementedEchoServer) NoAuthEcho(context.Context, *EchoReq) (*EchoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoAuthEcho not implemented")
}
func (UnimplementedEchoServer) NoAuthEchoErr(context.Context, *EchoReq) (*EchoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoAuthEchoErr not implemented")
}
func (UnimplementedEchoServer) InnerEcho(context.Context, *EchoReq) (*EchoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InnerEcho not implemented")
}
func (UnimplementedEchoServer) mustEmbedUnimplementedEchoServer() {}
func (UnimplementedEchoServer) testEmbeddedByValue()              {}

// UnsafeEchoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServer will
// result in compilation errors.
type UnsafeEchoServer interface {
	mustEmbedUnimplementedEchoServer()
}

func RegisterEchoServer(s grpc.ServiceRegistrar, srv EchoServer) {
	// If the following call pancis, it indicates UnimplementedEchoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Echo_ServiceDesc, srv)
}

func _Echo_BasicEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).BasicEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Echo_BasicEcho_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).BasicEcho(ctx, req.(*EchoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_NoAuthEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).NoAuthEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Echo_NoAuthEcho_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).NoAuthEcho(ctx, req.(*EchoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_NoAuthEchoErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).NoAuthEchoErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Echo_NoAuthEchoErr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).NoAuthEchoErr(ctx, req.(*EchoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_InnerEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).InnerEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Echo_InnerEcho_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).InnerEcho(ctx, req.(*EchoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Echo_ServiceDesc is the grpc.ServiceDesc for Echo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Echo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "echo.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BasicEcho",
			Handler:    _Echo_BasicEcho_Handler,
		},
		{
			MethodName: "NoAuthEcho",
			Handler:    _Echo_NoAuthEcho_Handler,
		},
		{
			MethodName: "NoAuthEchoErr",
			Handler:    _Echo_NoAuthEchoErr_Handler,
		},
		{
			MethodName: "InnerEcho",
			Handler:    _Echo_InnerEcho_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echo.proto",
}
