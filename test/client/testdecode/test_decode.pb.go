// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v4.24.2
// source: test_decode.proto

package testdecode

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NestedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NestedInt     int32                  `protobuf:"varint,1,opt,name=nested_int,json=nestedInt,proto3" json:"nested_int,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NestedMessage) Reset() {
	*x = NestedMessage{}
	mi := &file_test_decode_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedMessage) ProtoMessage() {}

func (x *NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_decode_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedMessage.ProtoReflect.Descriptor instead.
func (*NestedMessage) Descriptor() ([]byte, []int) {
	return file_test_decode_proto_rawDescGZIP(), []int{0}
}

func (x *NestedMessage) GetNestedInt() int32 {
	if x != nil {
		return x.NestedInt
	}
	return 0
}

type TestMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	StringVal         string                 `protobuf:"bytes,1,opt,name=string_val,json=stringVal,proto3" json:"string_val,omitempty"`
	Int32Val          int32                  `protobuf:"varint,2,opt,name=int32_val,json=int32Val,proto3" json:"int32_val,omitempty"`
	BoolVal           bool                   `protobuf:"varint,3,opt,name=bool_val,json=boolVal,proto3" json:"bool_val,omitempty"`
	RepeatedStr       []string               `protobuf:"bytes,4,rep,name=repeated_str,json=repeatedStr,proto3" json:"repeated_str,omitempty"`
	MapVal            map[string]string      `protobuf:"bytes,5,rep,name=map_val,json=mapVal,proto3" json:"map_val,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NestedMsg         *NestedMessage         `protobuf:"bytes,6,opt,name=nested_msg,json=nestedMsg,proto3" json:"nested_msg,omitempty"`
	RepeatedNestedMsg []*NestedMessage       `protobuf:"bytes,7,rep,name=repeated_nested_msg,json=repeatedNestedMsg,proto3" json:"repeated_nested_msg,omitempty"`
	FileContent       []byte                 `protobuf:"bytes,8,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
	RepeatedFile      [][]byte               `protobuf:"bytes,9,rep,name=repeated_file,json=repeatedFile,proto3" json:"repeated_file,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	mi := &file_test_decode_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_decode_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_test_decode_proto_rawDescGZIP(), []int{1}
}

func (x *TestMessage) GetStringVal() string {
	if x != nil {
		return x.StringVal
	}
	return ""
}

func (x *TestMessage) GetInt32Val() int32 {
	if x != nil {
		return x.Int32Val
	}
	return 0
}

func (x *TestMessage) GetBoolVal() bool {
	if x != nil {
		return x.BoolVal
	}
	return false
}

func (x *TestMessage) GetRepeatedStr() []string {
	if x != nil {
		return x.RepeatedStr
	}
	return nil
}

func (x *TestMessage) GetMapVal() map[string]string {
	if x != nil {
		return x.MapVal
	}
	return nil
}

func (x *TestMessage) GetNestedMsg() *NestedMessage {
	if x != nil {
		return x.NestedMsg
	}
	return nil
}

func (x *TestMessage) GetRepeatedNestedMsg() []*NestedMessage {
	if x != nil {
		return x.RepeatedNestedMsg
	}
	return nil
}

func (x *TestMessage) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *TestMessage) GetRepeatedFile() [][]byte {
	if x != nil {
		return x.RepeatedFile
	}
	return nil
}

var File_test_decode_proto protoreflect.FileDescriptor

const file_test_decode_proto_rawDesc = "" +
	"\n" +
	"\x11test_decode.proto\x12\n" +
	"testdecode\".\n" +
	"\rNestedMessage\x12\x1d\n" +
	"\n" +
	"nested_int\x18\x01 \x01(\x05R\tnestedInt\"\xcd\x03\n" +
	"\vTestMessage\x12\x1d\n" +
	"\n" +
	"string_val\x18\x01 \x01(\tR\tstringVal\x12\x1b\n" +
	"\tint32_val\x18\x02 \x01(\x05R\bint32Val\x12\x19\n" +
	"\bbool_val\x18\x03 \x01(\bR\aboolVal\x12!\n" +
	"\frepeated_str\x18\x04 \x03(\tR\vrepeatedStr\x12<\n" +
	"\amap_val\x18\x05 \x03(\v2#.testdecode.TestMessage.MapValEntryR\x06mapVal\x128\n" +
	"\n" +
	"nested_msg\x18\x06 \x01(\v2\x19.testdecode.NestedMessageR\tnestedMsg\x12I\n" +
	"\x13repeated_nested_msg\x18\a \x03(\v2\x19.testdecode.NestedMessageR\x11repeatedNestedMsg\x12!\n" +
	"\ffile_content\x18\b \x01(\fR\vfileContent\x12#\n" +
	"\rrepeated_file\x18\t \x03(\fR\frepeatedFile\x1a9\n" +
	"\vMapValEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x13Z\x11client/testdecodeb\x06proto3"

var (
	file_test_decode_proto_rawDescOnce sync.Once
	file_test_decode_proto_rawDescData []byte
)

func file_test_decode_proto_rawDescGZIP() []byte {
	file_test_decode_proto_rawDescOnce.Do(func() {
		file_test_decode_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_test_decode_proto_rawDesc), len(file_test_decode_proto_rawDesc)))
	})
	return file_test_decode_proto_rawDescData
}

var file_test_decode_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_test_decode_proto_goTypes = []any{
	(*NestedMessage)(nil), // 0: testdecode.NestedMessage
	(*TestMessage)(nil),   // 1: testdecode.TestMessage
	nil,                   // 2: testdecode.TestMessage.MapValEntry
}
var file_test_decode_proto_depIdxs = []int32{
	2, // 0: testdecode.TestMessage.map_val:type_name -> testdecode.TestMessage.MapValEntry
	0, // 1: testdecode.TestMessage.nested_msg:type_name -> testdecode.NestedMessage
	0, // 2: testdecode.TestMessage.repeated_nested_msg:type_name -> testdecode.NestedMessage
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_test_decode_proto_init() }
func file_test_decode_proto_init() {
	if File_test_decode_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_test_decode_proto_rawDesc), len(file_test_decode_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_decode_proto_goTypes,
		DependencyIndexes: file_test_decode_proto_depIdxs,
		MessageInfos:      file_test_decode_proto_msgTypes,
	}.Build()
	File_test_decode_proto = out.File
	file_test_decode_proto_goTypes = nil
	file_test_decode_proto_depIdxs = nil
}
